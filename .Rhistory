#we create a tibble of columns N,st_dev and sigma
#column N contains the "sample_sizes vector"
#column st_dev is empty for now
#column sigma is of course 1
simexp <- tibble(
N = sample_sizes,
st_dev = NA,
sigma = 1
)
# we add a new column theoretical which contains 1/sqrt(N) for each N
simexp <- simexp %>%
mutate(theoretical = 1 / sqrt(N))
#Task5
# Loop over each row in the data frame
for (i in 1:nrow(simexp)) {
# Generate sample means for the current N
sample_means <- rep(NA, M)  # Assuming you have M defined already
for (j in 1:M) {
sample_means[j] <- sim_norm(simexp$N[i])
}
# Calculate and assign the standard deviation
simexp$st_dev[i] <- sd(sample_means)
}
#Task6
library(ggplot2)
ggplot(simexp, aes(x = N)) +
geom_line(aes(y = st_dev), linetype = "solid") +  # Observed standard deviation
geom_line(aes(y = theoretical), linetype = "dashed") +  # Theoretical standard deviation
labs(x = "Sample Size (N)", y = "Standard Deviation") +
ggtitle("Observed vs Theoretical Standard Deviation") +
theme_minimal()
ggplot(simexp, aes(x = N)) +
geom_line(aes(y = st_dev), linetype = "solid") +  # Observed standard deviation
geom_line(aes(y = theoretical), linetype = "dashed")
View(simexp)
ggplot(simexp, aes(x = N)) +
geom_line(aes(y = st_dev), linetype = "solid") +  # Observed standard deviation
geom_line(aes(y = theoretical), linetype = "dashed")
View(simexp)
View(simexp)
View(simexp)
View(simexp)
View(simexp)
View(simexp)
simTweedieTest <-
function(N) {
t.test(rtweedie(
N,
mu = 10000,
phi = 100,
power = 1.9
),
mu = 10000)$p.value
}
MTweedieTests <-
function(N, M, sig) {
sum(replicate(M, simTweedieTest(N)) < sig) / M
}
for (i in 1:nrow(df)) {
df$share_reject[i] <-
MTweedieTests(N = df$N[i],
M = df$M[i],
sig = configs$significance_level)
}
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for (i in 1:nrow(df)) {
df$share_reject[i] <-
MTweedieTests(N = df$N[i],
M = df$M[i],
sig = configs$significance_level)
}
for (i in 1:nrow(df)) {
df$share_reject[i] <-
MTweedieTests(N = df$N[i],
M = df$M[i],
sig = configs$significance_level)
}
# Assignment 1:
library(tweedie)
for (i in 1:nrow(df)) {
df$share_reject[i] <-
MTweedieTests(N = df$N[i],
M = df$M[i],
sig = configs$significance_level)
}
simTweedieTest <-
function(N) {
t.test(rtweedie(
N,
mu = 10000,
phi = 100,
power = 1.9
),
mu = 10000)$p.value
}
MTweedieTests <-
function(N, M, sig) {
sum(replicate(M, simTweedieTest(N)) < sig) / M
}
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for (i in 1:nrow(df)) {
df$share_reject[i] <-
MTweedieTests(N = df$N[i],
M = df$M[i],
sig = configs$significance_level)
}
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
significance_level<- .05
for (i in 1:nrow(df)) {
df$share_reject[i] <-
MTweedieTests(N = df$N[i],
M = df$M[i],
sig = configs$significance_level)
}
??configs
?configs
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
View(df)
MTests <-
function(N, M, type, sig) {
sum(replicate(M,
simTest(
N = N,
type =
type,
mu =
10000
)) < sig) / M
}
df <-
expand.grid(
N = c(10, 100, 1000, 5000),
M = 1000,
type = c("tweedie", "normal"),
share_reject = NA
) %>%
as_tibble()
library(tidyverse)
df <-
expand.grid(
N = c(10, 100, 1000, 5000),
M = 1000,
type = c("tweedie", "normal"),
share_reject = NA
) %>%
as_tibble()
View(df)
for (i in 1:nrow(df)) {
print(i)
df$share_reject[i] <-
MTests(df$N[i],
df$M[i],
df$type[i],
.05)
}
simDat <-
function(N, type, mu) {
if (type == "tweedie") {
return(rtweedie(
N,
mu = mu,
phi = 100,
power = 1.9
))
}
if (type == "normal") {
return(rnorm(N, mean = mu))
}
else{
stop("invalid distribution")
}
}
simTest <-
function(N, type, mu) {
t.test(simDat(N = N,
type = type,
mu = mu),
mu = mu)$p.value
}
MTests <-
function(N, M, type, sig) {
sum(replicate(M,
simTest(
N = N,
type =
type,
mu =
10000
)) < sig) / M
}
df <-
expand.grid(
N = c(10, 100, 1000, 5000),
M = 1000,
type = c("tweedie", "normal"),
share_reject = NA
) %>%
as_tibble()
for (i in 1:nrow(df)) {
print(i)
df$share_reject[i] <-
MTests(df$N[i],
df$M[i],
df$type[i],
.05)
}
View(df)
library(doParallel)
setwd("C:/Users/icero/Downloads/Autumn 2023 H23/BAN 400 H23/parallel-computing-Syed-Amjad-Ali-1")
tic("Single CPU on all calculations")
library(tictoc)
library(doParallel)
maxcores <- 10
Cores <- min(parallel::detectCores(), maxcores)
cl <- makeCluster(Cores)
registerDoParallel(cl)
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr', 'tweedie')
) %dopar%
tibble(
N = df$N[i],
M = df$M[i],
share_reject =
MTests(df$N[i],
df$M[i],
df$type[i],
.05)
)
stopCluster(cl)
simTweedieTest <-
function(N) {
t.test(rtweedie(
N,
mu = 10000,
phi = 100,
power = 1.9
),
mu = 10000)$p.value
}
MTweedieTests <-
function(N, M, sig) {
sum(replicate(M, simTweedieTest(N)) < sig) / M
}
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
simDat <-
function(N, type, mu) {
if (type == "tweedie") {
return(rtweedie(
N,
mu = mu,
phi = 100,
power = 1.9
))
}
if (type == "normal") {
return(rnorm(N, mean = mu))
}
else{
stop("invalid distribution")
}
}
simTest <-
function(N, type, mu) {
t.test(simDat(N = N,
type = type,
mu = mu),
mu = mu)$p.value
}
MTests <-
function(N, M, type, sig) {
sum(replicate(M,
simTest(
N = N,
type =
type,
mu =
10000
)) < sig) / M
}
df <-
expand.grid(
N = c(10, 100, 1000, 5000),
M = 1000,
type = c("tweedie", "normal"),
share_reject = NA
) %>%
as_tibble()
maxcores <- 10
Cores <- min(parallel::detectCores(), maxcores)
cl <- makeCluster(Cores)
registerDoParallel(cl)
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr', 'tweedie')
) %dopar%
tibble(
N = df$N[i],
M = df$M[i],
share_reject =
MTests(df$N[i],
df$M[i],
df$type[i],
.05)
)
library(doParallel)
maxcores <- 14
Cores <- min(parallel::detectCores(), maxcores)
cl <- makeCluster(Cores)
registerDoParallel(cl)
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr', 'tweedie')
) %dopar%
tibble(
N = df$N[i],
M = df$M[i],
share_reject =
MTests(df$N[i],
df$M[i],
df$type[i],
.05)
)
stopCluster(cl)
tic("Single CPU on all calculations")
source("scripts/solution1.R")
toc(log = TRUE)
stopCluster(cl)
maxcores <- 14
Cores <- min(parallel::detectCores(), maxcores)
cl <- makeCluster(Cores)
registerDoParallel(cl)
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr', 'tweedie')
) %dopar%
tibble(
N = df$N[i],
M = df$M[i],
share_reject =
MTests(df$N[i],
df$M[i],
df$type[i],
.05)
)
stopCluster(cl)
library(doParallel)
maxcores <- 14
Cores <- min(parallel::detectCores(), maxcores)
cl <- makeCluster(Cores)
registerDoParallel(cl)
MParTweedieTests <-
function(N, M, sig, maxcores) {
Cores <- min(parallel::detectCores(), maxcores)
cl <- makeCluster(Cores)
registerDoParallel(cl)
m_per_core <- round(M / Cores)
m_total <- m_per_core * Cores
rejects_per_core <-
foreach(
i = 1:Cores,
.combine = 'rbind',
.packages = c('magrittr', 'dplyr', 'tweedie'),
.export = c('simTweedieTest')
) %dopar%
sum(replicate(m_per_core, simTweedieTest(N)) < sig)
stopCluster(cl)
sum(rejects_per_core) / m_total
}
for (i in 1:nrow(df)) {
df$share_reject[i] <-
MParTweedieTests(
df$N[i],
df$M[i],
df$type[i],
.05)
}
tic("Parallel loop alt 1")
source("scripts/solution2.R")
toc(log = TRUE)
tic("Parallel loop alt 2")
source("scripts/solution3.R")
tic("Single CPU on all calculations")
source("scripts/solution1.R")
toc(log = TRUE)
library(doParallel)
maxcores <- 14
Cores <- min(parallel::detectCores(), maxcores)
cl <- makeCluster(Cores)
registerDoParallel(cl)
MParTweedieTests <-
function(N, M, sig, maxcores) {
Cores <- min(parallel::detectCores(), maxcores)
cl <- makeCluster(Cores)
registerDoParallel(cl)
m_per_core <- round(M / Cores)
m_total <- m_per_core * Cores
rejects_per_core <-
foreach(
i = 1:Cores,
.combine = 'rbind',
.packages = c('magrittr', 'dplyr', 'tweedie'),
.export = c('simTweedieTest')
) %dopar%
sum(replicate(m_per_core, simTweedieTest(N)) < sig)
stopCluster(cl)
sum(rejects_per_core) / m_total
}
for (i in 1:nrow(df)) {
df$share_reject[i] <-
MParTweedieTests(
df$N[i],
df$M[i],
df$type[i],
.05)
}
for (i in 1:nrow(df)) {
df$share_reject[i] <-
MParTweedieTests(
df$N[i],
df$M[i],
df$type[i],
.05,maxcores)
}
for (i in 1:nrow(df)) {
df$share_reject[i] <-
MParTweedieTests(
df$N[i],
df$M[i],
0.05,  # Pass the significance level here
maxcores  # Use the maxcores variable here
)
}
tic("Parallel loop alt 2")
source("scripts/solution3.R")
toc(log = TRUE)
tic("Single CPU on all calculations")
source("scripts/solution1.R")
toc(log = TRUE)
tic("Parallel loop alt 1")
source("scripts/solution2.R")
toc(log = TRUE)
tic("Parallel loop alt 2")
source("scripts/solution3.R")
toc(log = TRUE)
